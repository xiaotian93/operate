import React, { Component } from 'react';
import { Table , Row , Col , Modal , Input , Button , message } from 'antd';
import moment from 'moment';

import Filter from '../../ui/Filter';
import axios from '../../../ajax/request'
import { hs_audit_second , hs_tast_approve , combined_senior_total } from '../../../ajax/api';
import { page } from '../../../ajax/config';
import { format_table_data } from '../../../ajax/tool';
import ComponentRoute from '../../../templates/ComponentRoute';

class review_hs extends Component{
    constructor(props) {
        super(props);
        this.state = {
            selectedRowKeys: [],
            selectedRows: [],
            loading: false,
            total:1,
            current:1,
            pageSize:page.size,
            data:[],
            filter:JSON.parse(props.location.query.filter||"[]"),
            model:{
                visible:false,
                title:'确认通过？',
                text:'',
                approved:true,
                id:0
            },
            postil:{
                show:"none",
                text:"",
                left:10,
                top:10
            },
            companys:[],
            upload:{
                show:false,
                companyId:2
            },
            loanPeriod:[
                { "name": "12月","val": 12}
            ]
        };
    }
    componentWillMount(){
        this.columns = [
            {
                title: '序号',
                width:50,
                dataIndex: 'key',
            },
            {
                title: '订单编号',
                width:280,
                dataIndex: 'orderId',
            },
            {
                title: '订单时间',
                width:160,
                dataIndex: 'showVo.signTime',
            },
            {
                title: 'uniqId',
                width:210,
                dataIndex: 'showVo.uniqId',
            },
            {
                title: '签单日',
                width:100,
                render:(data) => {
                    try{
                       return (this.set_postil(data,data.showVo.policy_info.signDate,'signDate'))
                    }catch(e){
                        return ""
                    }
                }
            },
            {
                title: '保险公司',
                width:80,
                dataIndex: 'showVo.policy_info.company',
            },
            {
                title: '保单号',
                width:200,
                dataIndex: 'insurNo'
            },
            {
                title: 'vin码',
                width:180,
                render:(data) => {
                    try{
                       return (this.set_postil(data,data.showVo.car_info.vin_code,'vin_code'))
                    }catch(e){
                        return ""
                    }
                }
            },
            {
                title: '投保人',
                dataIndex: 'showVo.policy_info.policyPerson',
            },
            {
                title: '商业险金额(元)',
                width:120,
                render:(data) => {
                    try{
                       return (this.set_postil(data,data.showVo.policy_info.fee.commInsurance,'commInsurance'))
                    }catch(e){
                        return data.commInsurance
                    }
                }
            },
            {
                title: '交强险金额(元)',
                width:120,
                render:(data) => {
                    try{
                       return (this.set_postil(data,data.showVo.policy_info.fee.trafficInsurance,'trafficInsurance'))
                    }catch(e){
                        return data.trafficInsurance
                    }
                }
            },
            {
                title: '车船税金额(元)',
                width:120,
                render:(data) => {
                    try{
                       return (this.set_postil(data,data.showVo.policy_info.fee.travelTax,'travelTax'))
                    }catch(e){
                        return data.travelTax
                    }
                }
            },
            {
                title: '操作',
                width:230,
                fixed: 'right',
                render: (data) => {
                    if(!data.taskId){
                        return ""
                    }
                    return (
                        <span>
                            <Button type="success" size="small" onClick={()=>(this.approved(data,true))}>通过</Button>&emsp;
                            <Button type="denger" size="small" onClick={()=>(this.approved(data,false))}>驳回</Button>&emsp;
                            <Button size="small" onClick={()=>(this.detail(data.taskId,data.bussiness))}>查看</Button>
                        </span>
                    )
                }
            }
        ];
        this.filter = {
            __OrderId:{
                name:"订单编号",
                type:"text",
                placeHolder:"请输入订单号"
            },
            time:{
                name:"订单时间",
                type:"range_date",
                feild_s:"__SignTime",
                feild_e:"__SignTime",
                placeHolder:['开始日期',"结束日期"],
            },
            // __SignDate:{
            //     name:"签单日",
            //     placeHolder:"请选择签单日期",
            //     type:"single_date"
            // },
            // __Company:{
            //     name:"保险公司",
            //     placeHolder:"请选择保险公司",
            //     type:"select",
            //     values:JSON.parse(localStorage.getItem("select")).companys
            // },
            __InsurNo:{
                name:"保单号",
                placeHolder:"请输入保单号",
                type:"text"
            },
            __VinCode:{
                name:"vin码",
                placeHolder:"请输入vin码",
                type:"text"
            }
        }
    }
    componentDidMount(){
        this.get_list(1,this.state.filter);
    }
    get_list(page_no,filter=[]){
        let data = {
            page:page_no||1,
            size:page.size,
            filter:JSON.stringify(filter)
        }
        this.setState({
            loading:true,
            selectedRowKeys:[]
        })
        axios.post(hs_audit_second,data).then((data)=>{
            let list = this.extract_data(data);
            // console.log(list);
            this.get_total(JSON.stringify(filter));
            this.setState({
                data:format_table_data(list),
                loading:false,
                total:data.totalPage*page.size,
                current:data.currentPage
            })
        });
    }
    get_total(filter){
        let rqd = {
            filter:filter
        }
        axios.post(combined_senior_total,rqd).then((data)=>{
            let total = {};
            let list = JSON.parse(JSON.stringify(this.state.data));
            total.key = "合计";
            total.commInsurance = data.data.__CommInsurance;
            total.trafficInsurance = data.data.__TrafficInsurance;
            total.travelTax = data.data.__TravelTax;
            list.push(total);
            this.setState({
                data:list
            })
        })
    }
    extract_data(data){
        let list = data.data;
        let res = [];
        for(let l in list){
            let item = JSON.parse(list[l].processVariables.detail);
            item.taskId = list[l].id;
            item.bussiness = list[l].processVariables.id;
            res.push(item);
        }
        return res;
    }
    set_postil(data,val,feild){
        let faild_list = data.matchDetailList;
        let className = '';
        let text = [];
        for(let f in faild_list){
            let faild = faild_list[f];
            if(faild.status!==-1){
                continue;
            }
            if(faild.matchKey===feild){
                className = 'corner';
                text.push(<div key="f">原因：{ faild.matchResult } </div>);
                text.push(<div key="e">线下值：{ faild.matchValueInExcel } </div>);
                text.push(<div key="c">线上值： { faild.matchValueInOnline } </div>);
            }
        }
        return {
            children:val,
            props:{
                className:className,
                onMouseOver:(e) => {this.mouse_enter(e,data,text)},
                onMouseOut:(e) => {this.mouse_out(e,data,text)}
            }
        }
    }
    mouse_enter(event,data,text){
        let td = event.target;
        if(td.className.indexOf("corner")<0){
            return;
        }
        let scroll_ele = td.parentElement.parentElement.parentElement.parentElement;
        this.setState({
            postil:{
                show:"inline-block",
                text:text,
                left:td.offsetLeft+td.clientWidth+25-scroll_ele.scrollLeft,
                td:td.offsetTop - scroll_ele.scrollTop + td.clientHeight
            }
        })
    }
    mouse_out(event){
        let td = event.target;
        if(td.className.indexOf("corner")<0){
            return;
        }
        this.setState({
            postil:{
                show:"none",
                text:"",
                left:10,
                top:10
            }
        })
    }
    get_filter(data){
        let newFilter = data.concat(JSON.parse(this.props.location.query.filter||"[]"));
        this.setState({
            filter:newFilter
        })
        this.get_list(1,newFilter);
    }
    set_filter(){
        let filter = JSON.parse(this.props.location.query.filter||"[]");
        for(let f in filter){
            if(filter[f].key==="__SignDate"){
                filter[f].value = moment(filter[f].value);
            }
        }
        return filter
    }
    detail(taskId,bussiness){
        window.open('/db/review/hs/detail?taskId='+taskId+'&id='+bussiness)
    }
    approved(data,pass){
        this.setState({
            model:{
                approved:pass,
                visible:true,
                title:pass?'确认通过？':'确认驳回',
                text:'',
                id:[data.taskId]
            }
        })
    }
    handleOk(){
        this.setState({
            model:{
                approved:this.state.model.approved,
                loading:true,
                text:this.state.model.text,
                visible:this.state.model.visible,
                title:this.state.model.title,
                id:this.state.model.id,
            }
        })
        let ids = this.state.model.id;
        this.approve_post(ids,this.state.model.approved,this.state.model.text);
    }
    batch_operation(pass){
        let rows = this.state.selectedRows;
        let ids = [];
        for(let r in rows){
            ids.push(rows[r].taskId);
        }
        this.setState({
            model:{
                approved:pass,
                visible:true,
                title:pass?'确认通过？':'确认驳回',
                text:'',
                loading:false,
                id:ids
            }
        })
    }
    approve_post(taskIds,approved,comment){
        let rqd = [];
        rqd.push("approved="+approved);
        rqd.push("comment="+comment);
        for(let t in taskIds){
            rqd.push("taskId="+taskIds[t]);
        }
        axios.post(hs_tast_approve,rqd.join("&")).then((res)=>{
            this.handleCancel();
            message.success(res.msg)
            this.get_list(1,this.state.filter);
        });
    }
    handleCancel(){
        this.setState({
            model:{
                approved:this.state.model.approved,
                text:this.state.model.text,
                loading:false,
                id:this.state.model.id,
                title:this.state.model.title,
                visible:false
            }
        })
    }
    textChange(e){
        this.setState({
            model:{
                approved:this.state.model.approved,
                loading:false,
                text:e.target.value,
                visible:this.state.model.visible,
                title:this.state.model.title,
                id:this.state.model.id,
            }
        })
    }

    page_up(page,pageSize){
        this.get_list(page,this.state.filter);
    }
    render (){
        const { selectedRowKeys } = this.state;
        let pagination = {
            total : this.state.total,
            current : this.state.current,
            pageSize : this.state.pageSize+1,
            onChange : this.page_up.bind(this)
        }
        const rowSelection = {
            selectedRowKeys,
            onChange: (selectedRowKeys, selectedRows) => {
                console.log(selectedRowKeys,selectedRows);
                this.setState({ selectedRowKeys , selectedRows });
            },
            getCheckboxProps: record => ({
                disabled: record.name === 'Disabled User',
                name: record.name
            }),
        };
        let table_height = window.innerHeight - 422;
        const table_props = {
            scroll:{x: 2150 , y:table_height},
            rowSelection:rowSelection,
            columns:this.columns ,
            dataSource:this.state.data,
            pagination : pagination,
            loading:this.state.loading,
        }
        const footer = [
            <Button key="back" onClick={this.handleCancel.bind(this)}>取消</Button>,
            <Button key="submit" type="primary" loading={this.state.model.loading} onClick={this.handleOk.bind(this)}>确认</Button>
        ]
        const model_props = {
            visible : this.state.model.visible, 
            title : this.state.model.title,
            onOk : this.handleOk.bind(this), 
            onCancel : this.handleCancel.bind(this),
            footer : footer
        }
        return(
            <div className="Component-body">
                <Filter data-get={this.get_filter.bind(this)} data-set={this.set_filter.bind(this)} data-source={this.filter} loanPeriod={this.state.loanPeriod} />
                <Row className="content">
                    <Col span={22}>
                        <Button type="success" onClick={(e)=>(this.batch_operation(true))}>批量通过</Button>&emsp;
                        <Button type="denger" onClick={(e)=>(this.batch_operation(false))}>批量驳回</Button>
                    </Col>
                </Row>
                <Row className="content">
                    <Table {...table_props} bordered />
                    <div className="postil" style={{display:this.state.postil.show,left:this.state.postil.left+'px',top:this.state.postil.top+'px'}}>{this.state.postil.text}</div>
                </Row>
                <Modal {...model_props}>
                    <Input placeholder="请输入审批意见" value={this.state.model.text} onChange={this.textChange.bind(this)} />
                </Modal>
            </div>
        )
    }
}

export default ComponentRoute(review_hs);
