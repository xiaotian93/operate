import React, { Component } from 'react';
import { Modal , Input , Button , Icon , Upload , message } from 'antd';
// import moment from 'moment'
// import Filter from '../../ui/Filter_8';
import axios from '../../../ajax/request'
import { hs_audit_first , hs_audit_total , hs_tast_approve , import_excel , match_now} from '../../../ajax/api';
import { page , host } from '../../../ajax/config';
import { format_table_data } from '../../../ajax/tool';
import Permissions from '../../../templates/Permissions';
import ComponentRoute from '../../../templates/ComponentRoute';
import List from '../../templates/list';
import ListBtn from '../../templates/listBtn';
class check_hs extends Component{
    constructor(props) {
        super(props);
        this.state = {
            selectedRowKeys: [],
            selectedRows: [],
            loading: false,
            total:1,
            current:1,
            pageSize:page.size,
            data:[],
            model:{
                visible:false,
                loading:false,
                title:'确认通过？',
                text:'',
                approved:true,
                id:0
            },
            postil:{
                show:"none",
                text:"",
                left:10,
                top:10
            },
            companys:[],
            upload:{
                show:false,
                companyId:2
            }
        };
    }
    componentWillMount(){
        this.columns = [
            {
                title: '序号',
                width: 50,
                dataIndex: 'key',
                render:(text,record,index)=>{
                    if(text==="合计"){
                        return text;
                    }
                    return `${index+1}`
                }
            },
            {
                title: '订单编号',
                // width:280,
                dataIndex: 'orderId',
            },
            {
                title: '订单时间',
                // width:170,
                render:(data) => (this.set_postil(data,data.showVo.signTime,'signTime'))
            },
            {
                title: 'uniqId',
                // width:220,
                dataIndex: 'showVo.uniqId'
            },
            {
                title: '签单日',
                // width:110,
                render:(data) => (this.set_postil(data,data.showVo.policy_info.signDate,'signDate'))
            },
            {
                title: '保险公司',
                // width:100,
                dataIndex: 'showVo.policy_info.company',
            },
            {
                title: '保单号',
                dataIndex: 'insurNo'
            },
            {
                title: 'vin码',
                // width:180,
                render:(data) => (this.set_postil(data,data.showVo.car_info.vin_code,'vin_code'))
            },
            {
                title: '投保人',
                // width:250,
                dataIndex: 'showVo.policy_info.policyPerson',
            },
            {
                title: '商业险金额',
                // width:120,
                render:(data) => (this.set_postil(data,data.showVo.policy_info.fee.commInsurance,'commInsurance'))
            },
            {
                title: '交强险金额',
                // width:120,
                render:(data) => (this.set_postil(data,data.showVo.policy_info.fee.trafficInsurance,'trafficInsurance'))
            },
            {
                title: '车船税金额',
                // width:120,
                render:(data) => (this.set_postil(data,data.showVo.policy_info.fee.travelTax,'travelTax'))
            },
            {
                title: '线上数据',
                // width:75,
                dataIndex: 'onlineCondition',
            },
            {
                title: '线下数据',
                // width:75,
                dataIndex: 'excelCondition',
            },
            {
                title: '匹配状态',
                // width:75,
                dataIndex: 'showVo.matchMsgDetail',
            },
            {
                title: '操作',
                // width:230,
                // fixed: 'right',
                render: (data) => {
                    if(data.key==='总计'){
                        return '';
                    }
                    var btn=[<Permissions server="bmd-bfq-manager" roleKey="audit_readonly" tag="button" type="primary" size="small" onClick={()=>(this.approved(data,true))}>通过</Permissions>,
                    <Permissions server="bmd-bfq-manager" roleKey="audit_readonly" tag="button" type="danger" size="small" onClick={()=>(this.approved(data,false))}>驳回</Permissions>,
                    <Button size="small" onClick={()=>(this.detail(data.taskId,data.bussiness))}>查看</Button>];
                    return <ListBtn btn={btn} />;
                    }
            }
        ];
        this.filter = {
            __OrderId:{
                name:"订单号",
                type:"text",
                placeHolder:"请输入订单号"
            },
            __VinCode:{
                name:"vin码",
                type:"text",
                placeHolder:"请输入vin码"
            },
            __InsurNo:{
                name:"保单号",
                type:"text",
                placeHolder:"请输入保单号"
            },
            time:{
                name:"订单时间",
                type:"range_date",
                feild_s:"__SignTime",
                feild_e:"__SignTime",
                placeHolder:['开始日期',"结束日期"]
            },
            // billNo2:{
            //     name:"保险公司",
            //     type:"select",
            //     values:this.state.companys
            // },
            __CompanyId:{
                name:"保险公司",
                placeHolder:"全部",
                type:"select",
                values:JSON.parse(localStorage.getItem("select")).companys_number
                // type:"multi_select",
                // values:'companys'
            },
            __OnlineCondition:{
                name:"线上数据",
                placeHolder:"全部",
                type:"select",
                values:[{
                    name:"全部",
                    val:""
                },{
                    name:"存在",
                    val:"存在"
                },{
                    name:"不存在",
                    val:"不存在"
                }]
            },
            __ExcelCondition:{
                name:"线下数据",
                placeHolder:"全部",
                type:"select",
                values:[{
                    name:"全部",
                    val:""
                },{
                    name:"存在",
                    val:"存在"
                },{
                    name:"不存在",
                    val:"不存在"
                }]
            },
            __MatchMsgDetail:{
                name:"匹配状态",
                placeHolder:"全部",
                type:"select",
                op:"like",
                values:[{
                    name:"全部",
                    val:""
                },{
                    name:"未匹配",
                    val:"未匹配"
                },{
                    name:"匹配成功",
                    val:"匹配成功"
                },{
                    name:"vin码匹配失败",
                    val:"vin码匹配失败"
                },{
                    name:"金额匹配失败",
                    val:"金额匹配失败"
                },{
                    name:"借贷日期匹配失败",
                    val:"借贷日期匹配失败"
                },{
                    name:"收款信息匹配失败",
                    val:"收款信息匹配失败"
                }]
            }
        }
    }
    componentDidMount(){
        this.get_select();
        // this.get_list();
        var select=window.localStorage.getItem(this.props.location.pathname);
        if(select){
            this.get_list(1,JSON.parse(select).remberData);
        }else{
            this.get_list();
        }

    }
    set_postil(data,val,feild){
        let faild_list = data.matchDetailList;
        let className = '';
        let text = [];
        for(let f in faild_list){
            let faild = faild_list[f];
            if(faild.status!==-1){
                continue;
            }
            if(faild.matchKey===feild){
                className = 'corner';
                text.push(<div key="f">原因：{ faild.matchResult } </div>);
                text.push(<div key="e">线下值：{ faild.matchValueInExcel } </div>);
                text.push(<div key="c">线上值： { faild.matchValueInOnline } </div>);
            }
        }
        return {
            children:val,
            props:{
                className:className,
                onMouseOver:(e) => {this.mouse_enter(e,data,text)},
                onMouseOut:(e) => {this.mouse_out(e,data,text)}
            }
        }
    }
    get_list(page_no,filter=[]){
        let rqd = {
            page:page_no||1,
            size:page.size,
            filter:JSON.stringify(filter)
        }
        this.setState({
            loading:true,
            selectedRowKeys:[]
        })
        axios.post(hs_audit_first,rqd).then((data)=>{
            let list = this.extract_data(data);
            this.get_total(rqd);
            this.setState({
                data:format_table_data(list,page_no,page.size),
                total:data.totalPage*page.size,
                current:data.currentPage,
                loading:false
            })
        });
        
    }
    get_total(param){
        axios.post(hs_audit_total,param).then((data)=>{
            if(this.state.data.length<=0){
                this.setState({
                    data:[]
                })
                return
            }
            let total_data = JSON.parse(JSON.stringify(this.state.data[0]));
            total_data.key = "总计";
            total_data.matchDetailList = [];
            total_data.showVo.policy_info.fee.commInsurance = data.data.__CommInsurance;
            total_data.showVo.policy_info.fee.travelTax = data.data.__TravelTax;
            total_data.showVo.policy_info.fee.trafficInsurance = data.data.__TrafficInsurance;
            total_data.orderId = "";
            total_data.showVo.signTime = "";
            total_data.showVo.policy_info.signDate = "";
            total_data.showVo.uniqId = "";
            total_data.showVo.policy_info.company = "";
            total_data.showVo.car_info.vin_code = "";
            total_data.insurNo = "";
            total_data.showVo.policy_info.policyPerson = "";
            total_data.onlineCondition = "";
            total_data.excelCondition = "";
            total_data.showVo.matchMsgDetail = "";
            let list = this.state.data;
            list.push(total_data);
            this.setState({
                data:list
            })
        });
    }
    get_select(){
        
        let select_datas = JSON.parse(window.localStorage.getItem("select"));
        this.setState({
            companys:select_datas.companys_require
        })
    }
    extract_data(data){
        let list = data.data;
        let res = [];
        for(let l in list){
            let item = JSON.parse(list[l].processVariables.detail);
            item.taskId = list[l].id;
            item.bussiness = list[l].processVariables.id;
            res.push(item);
        }
        return res;
    }
    get_filter(data){
        this.get_list(1,data);
        this.setState({
            filter:data
        })
    }
    detail(taskId,bussiness){
        window.open('/db/check/hs/detail?taskId='+taskId+'&id='+bussiness);
    }
    approved(data,pass){
        this.setState({
            model:{
                approved:pass,
                visible:true,
                title:pass?'确认所选订单及关联订单通过？':'确认所选订单及关联订单驳回？',
                text:'',
                id:[data.taskId]
            }
        })
    }
    mouse_enter(event,data,text){
        let td = event.target;
        if(td.className.indexOf("corner")<0){
            return;
        }
        let scroll_ele = td.parentElement.parentElement.parentElement.parentElement;
        this.setState({
            postil:{
                show:"inline-block",
                text:text,
                left:td.offsetLeft+td.clientWidth+25-scroll_ele.scrollLeft,
                td:td.offsetTop - scroll_ele.scrollTop + td.clientHeight
            }
        })
    }
    mouse_out(event){
        let td = event.target;
        if(td.className.indexOf("corner")<0){
            return;
        }
        this.setState({
            postil:{
                show:"none",
                text:"",
                left:10,
                top:10
            }
        })
    }
    handleOk(){
        this.approve_post(this.state.model.id,this.state.model.approved,this.state.model.text);
        this.handleCancel();
    }
    batch_operation(pass){
        let rows = this.state.selectedRows;
        let ids = [];
        if(rows.length<=0){
            message.warn("请选择订单");
            return;
        }
        for(let r in rows){
            ids.push(rows[r].taskId);
        }
        this.setState({
            model:{
                approved:pass,
                visible:true,
                title:pass?'确认所选订单及关联订单均通过？':'确认所选订单及关联订单均被驳回？',
                text:'',
                id:ids
            }
        })
    }
    approve_post(taskIds,approved,comment){
        let rqd = [];
        rqd.push("approved="+approved);
        rqd.push("comment="+comment);
        for(let t in taskIds){
            rqd.push("taskId="+taskIds[t]);
        }
        this.setState({
            loading:true
        })
        axios.post(hs_tast_approve,rqd.join("&")).then((res)=>{
            this.setState({
                loading:false
            })
            if(!res.data){
                this.get_list(1,this.state.filter);
                message.success(res.msg)
                return ;
            }
            let des = "";
            let {orderId ,relatedOrderId } = res.data;
            if(approved===false){
                if(relatedOrderId){
                    des = "订单"+orderId+"与关联订单"+relatedOrderId+"均被驳回";
                }else{
                    des = "订单已驳回";
                }
            }else{
                if(!relatedOrderId){
                    des = "订单已通过";
                }else if(res.data.needAudit){
                    des = "因关联订单"+relatedOrderId+"未审核所选订单暂进入等待状态";
                }else{
                    des = "订单"+orderId+"与关联订单"+relatedOrderId+"均已通过";
                }
            }
            Modal.success({
                title: '',
                content: des,
                okText:'确定'
            });
            this.get_list(1,this.state.filter);
        });
    }
    handleCancel(){
        this.setState({
            model:{
                approved:this.state.model.approved,
                text:this.state.model.text,
                id:this.state.model.id,
                title:this.state.model.title,
                visible:false
            }
        })
    }
    textChange(e){
        this.setState({
            model:{
                approved:this.state.model.approved,
                text:e.target.value,
                visible:this.state.model.visible,
                title:this.state.model.title,
                id:this.state.model.id,
            }
        })
    }

    page_up(page,pageSize){
        window.scrollTo(0,0);
        this.get_list(page,this.state.filter);
    }
    show_import(){
        this.setState({
            upload:{
                show:!this.state.upload.show
            }
        });
    }
    get_upload_companyId(id){
        this.setState({
            upload:{
                companyId:id
            }
        })
    }
    upload_back(data){
        if(data.file.status!=='done'){
            return;
        }
        if(data.file.response.status===0){
            localStorage.setItem("insurance_excel_import",JSON.stringify(data.file.response.data));
            window.location.href = '/db/check/hs/excel';
        }else{
            message.error(data.file.response.msg)
        }
    }
    match_now(){
        axios.get(match_now,null).then((data)=>{
            message.success(data.msg);
        });
    }
    render (){
        const { selectedRowKeys } = this.state;
        let pagination = {
            total : this.state.total,
            current : this.state.current,
            pageSize : this.state.pageSize,
            onChange : this.page_up.bind(this),
            showTotal:total=>`共${total}条数据`

        }
        const rowSelection = {
            selectedRowKeys,
            onChange: (selectedRowKeys, selectedRows) => {
                this.setState({ selectedRowKeys , selectedRows });
            },
            getCheckboxProps: record => ({
                disabled: record.key === '总计',
                name: record.key
            }),
        };
        const upload_props = {
            action:host + import_excel,
            data:{
                company:this.state.upload.companyId
            },
            showUploadList:false,
            withCredentials:true,
            onChange:this.upload_back,
            name:'file'
        }
        // let table_height = window.innerHeight - 422;
        const table_props = {
            // scroll:{x: 2400 , y:table_height},
            rowSelection:rowSelection,
            columns:this.columns ,
            dataSource:this.state.data,
            pagination : pagination,
            loading:this.state.loading,
        }
        const footer = [
            <Button key="back" onClick={this.handleCancel.bind(this)}>取消</Button>,
            <Button key="submit" type="primary" loading={this.state.loading_model} onClick={this.handleOk.bind(this)}>确认</Button>
        ]
        const model_props = {
            visible : this.state.model.visible, 
            confirmLoading:false,
            title : this.state.model.title,
            onOk : this.handleOk.bind(this), 
            onCancel : this.handleCancel.bind(this),
            footer : footer
        }

        let upload_items = [];
        for(let c in this.state.companys){
            upload_items.push(
                <div key={c} className="uploadButton" onClick={()=>{this.get_upload_companyId(this.state.companys[c].val)}}><Icon type="folder-add" />&emsp;{this.state.companys[c].name}</div>
            )
        }
        // let paths = this.props.location.pathname;
        const table={
            filter:{
                "data-get":this.get_filter.bind(this),
                "data-source":this.filter,
                companys:this.state.companys,
                "data-paths":this.props.location.pathname,
            },
            tableInfo:table_props,
            tableTitle:{
                left:<span>
                    金额单位：元
                </span>,
                right:<span>
                    <Permissions server={global.AUTHSERVER.bfq.key} roleKey={global.AUTHSERVER.bfq.role.normalAuditor} tag="button" type="primary" onClick={(e)=>(this.batch_operation(true))}>批量通过</Permissions>&emsp;
                    <Permissions server={global.AUTHSERVER.bfq.key} roleKey={global.AUTHSERVER.bfq.role.normalAuditor} tag="button" type="danger" onClick={(e)=>(this.batch_operation(false))}>批量驳回</Permissions>
                </span>
            },
            isFilter:true
        }
        return(
            <div className="Component-body">
                {/* <Filter data-get={this.get_filter.bind(this)} data-source={this.filter} companys={this.state.companys} data-paths={paths} />
                <Row style={{padding:"20px"}}>
                    <Row style={{background:"#fff"}}>
                        <Row style={{padding:"15px 22px 0 22px"}}>
                    <Col span={24} className="text-right">
                        <Permissions server={global.AUTHSERVER.bfq.key} roleKey={global.AUTHSERVER.bfq.role.normalAuditor} tag="button" type="primary" onClick={(e)=>(this.batch_operation(true))}>批量通过</Permissions>&emsp;
                        <Permissions server={global.AUTHSERVER.bfq.key} roleKey={global.AUTHSERVER.bfq.role.normalAuditor} tag="button" type="danger" onClick={(e)=>(this.batch_operation(false))}>批量驳回</Permissions>
                    </Col>
                    </Row>
                    <Row className="content">
                        <Table {...table_props} bordered />
                        <div className="postil" style={{display:this.state.postil.show,left:this.state.postil.left+'px',top:this.state.postil.top+'px'}}>{this.state.postil.text}</div>
                    </Row>
                    </Row>
                    
                </Row>  */}
                <List {...table} /> 
                <Modal {...model_props}>
                    <Input placeholder="请输入审批意见" value={this.state.model.text} onChange={this.textChange.bind(this)} />
                </Modal>
                <Modal visible={this.state.upload.show} title={'导入excel'} onCancel={this.show_import.bind(this)} width={200} footer={null}>
                    <Upload {...upload_props} className="upload_content">
                        {upload_items}
                    </Upload>
                </Modal>
            </div>
        )
    }
}

export default ComponentRoute(check_hs);
