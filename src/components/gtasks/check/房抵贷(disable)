import React, { Component } from 'react';
import { Table , Row , Modal , Input , Button , Icon , message } from 'antd';
// import moment from 'moment'

import Filter from '../../ui/Filter';
import { axios_fdd } from '../../../ajax/request';
import { fdd_get_list , fdd_approve0,fdd_deny0} from '../../../ajax/api';
import { page } from '../../../ajax/config';
import { format_table_data } from '../../../ajax/tool';
import ComponentRoute from '../../../templates/ComponentRoute';

class check_hs extends Component{
    constructor(props) {
        super(props);
        this.state = {
            selectedRowKeys: [],
            selectedRows: [],
            loading: false,
            total:1,
            current:1,
            pageSize:page.size,
            data:[],
            model:{
                visible:false,
                loading:false,
                title:'确认通过？',
                text:'',
                approved:true,
                id:0
            },
            companys:[]
        };
    }
    componentWillMount(){
        this.columns = [
            {
                title: '序号',
                width: 50,
                dataIndex: 'key',
            },
            {
                title: '订单编号',
                width:300,
                dataIndex: 'orderNo',
            },
            {
                title: '订单时间',
                width:200,
                dataIndex: 'createTime',
            },
            {
                title: '借款方',
                width:90,
                dataIndex:"borrowerName"
            },
            {
                title: '借款金额（元）',
                dataIndex: 'amount',
                render:(e)=>{
                    return e/100
                }
            },
            {
                title: '借款期限（月）',
                dataIndex: 'period',
            },
            {
                title: '长安保单号',
                width:200,
                dataIndex: 'insuranceNo',
            },
            {
                title: '借款合同强制公证',
                width:140,
                render:(data) => {
                    return data.loanNotingImageStorageNoList&&data.loanNotingImageStorageNoList.length>0?"已上传":"未上传";
                }
            },
            {
                title: '不动产登记证明',
                width:120,
                render:(data) => {
                    return data.realEstateRegistrationImageStorageNoList&&data.realEstateRegistrationImageStorageNoList.length>0?"已上传":"未上传";
                }
            },
            {
                title: '抵押合同强制公证',
                width:140,
                render:(data) => {
                    return data.mortageNotingImageStorageNoList&&data.mortageNotingImageStorageNoList.length>0?"已上传":"未上传";
                }
            },
            {
                title: '操作',
                width:230,
                fixed: 'right',
                render: (data) => {
                    if(data.key==='总计'){
                        return '';
                    }
                    return (
                        <span>
                            <Button type="primary" size="small" onClick={()=>(this.approved(data,true))}>通过</Button>&emsp;
                            <Button type="danger" size="small" onClick={()=>(this.approved(data,false))}>驳回</Button>&emsp;
                            <Button size="small" onClick={()=>(this.detail(data.orderNo))}>查看</Button>
                        </span>
                    )}
            }
        ];
        this.filter = {
            time:{
                name:"订单时间",
                type:"range_date",
                feild_s:"startTime",
                feild_e:"endTime",
                placeHolder:['开始日期',"结束日期"]
            },
            orderNo :{
                name:"订单编号",
                type:"text",
                placeHolder:"请输入订单编号"
            },
            borrowerName :{
                name:"借款方",
                type:"text",
                placeHolder:"请输入借款方"
            },
            insuranceNo :{
                name:"长安保单",
                type:"text",
                placeHolder:"请输入长安保单号"
            }
        }

    }
    componentDidMount(){
        this.get_select();
        this.get_list();
    }
    get_list(page_no,filter=[]){
        this.setState({
            loading:true,
            selectedRowKeys:[]
        });
        var filterStr="";
        if(filter.length>0){
            for(var i in filter){
                filterStr+="&"+filter[i].key+"="+filter[i].value;
            }
        }else{
            filterStr="";
        }
        axios_fdd.get(fdd_get_list+"?status=20&page="+(page_no===undefined?1:page_no)+"&size="+page.size+filterStr).then((data)=>{
            //let list = this.extract_data(data);
            //console.log(data)
            var list=data.result.data;
            this.setState({
                data:format_table_data(list.list),
                total:list.total,
                current:list.start,
                loading:false
            })
        });

    }
    get_select(){
        let select_data = JSON.parse(localStorage.getItem("select"));
        this.setState({
            companys:select_data.companys_require
        })
    }
    get_filter(data){
        this.get_list(1,data);
        this.setState({
            filter:data
        });
    }
    detail(orderNo){
        window.open('/db/check/fdd/detail?orderNo='+orderNo);
    }
    approved(data,pass){
        let flag = true;
        let keys = ["loanNotingImageStorageNoList","mortageNotingImageStorageNoList","realEstateRegistrationImageStorageNoList"]
        
        for(let k in keys){
            if(!data[keys[k]]||!data[keys[k]].length>0){
                flag = false
            }
        }
        // 未上传要件
        if(pass&&!flag){
            message.warn("请上传要件")
            return;
        }
        this.setState({
            model:{
                approved:pass,
                visible:true,
                title:pass?'确认所选订单及关联订单通过？':'确认所选订单及关联订单驳回？',
                text:'',
                id:[data.orderNo]
            }
        })
    }
    mouse_enter(event,data,text){
        let td = event.target;
        if(td.className.indexOf("corner")<0){
            return;
        }
        let scroll_ele = td.parentElement.parentElement.parentElement.parentElement;
        this.setState({
            postil:{
                show:"inline-block",
                text:text,
                left:td.offsetLeft+td.clientWidth+25-scroll_ele.scrollLeft,
                top:td.offsetTop
            }
        })
    }
    mouse_out(event){
        let td = event.target;
        if(td.className.indexOf("corner")<0){
            return;
        }
        this.setState({
            postil:{
                show:"none",
                text:"",
                left:10,
                top:10
            }
        })
    }
    handleOk(){
        this.approve_post(this.state.model.id,this.state.model.approved,this.state.model.text);
        this.handleCancel();
    }
    batch_operation(pass){
        let rows = this.state.selectedRows;
        let ids = [];
        if(rows.length<=0){
            message.warn("请选择订单");
            return;
        }
        for(let r in rows){
            ids.push(rows[r].taskId);
        }
        this.setState({
            model:{
                approved:pass,
                visible:true,
                title:pass?'确认所选订单及关联订单均通过？':'确认所选订单及关联订单均被驳回？',
                text:'',
                id:ids
            }
        })
    }
    approve_post(orderNo,approved,comment){
        //let rqd = [];
        //rqd.push("approved="+approved);
        //rqd.push("comment="+comment);
        //for(let t in taskIds){
        //    rqd.push("taskId="+taskIds[t]);
        //}
        let rqd={};
        rqd.orderNo=orderNo;
        rqd.comment=comment;

        let api=approved?fdd_approve0:fdd_deny0;
        if(approved){
            this.setState({
                loading:true
            });
            axios_fdd.post(api,rqd).then((res)=>{
                this.setState({
                    loading:false
                });
                message.success(res.result.msg);
                this.get_list();
            });
        }else{
            this.setState({
                loading:true
            });
            axios_fdd.post(api,rqd).then((res)=>{
                this.setState({
                    loading:false
                });
                message.success(res.result.msg);
                this.get_list();
            });
        }


    }
    handleCancel(){
        this.setState({
            model:{
                approved:this.state.model.approved,
                text:this.state.model.text,
                id:this.state.model.id,
                title:this.state.model.title,
                visible:false,
                loanNotingImageStorageNoList:this.state.model.loanNotingImageStorageNoList,
                mortageImageStorageNoList:this.state.model.mortageImageStorageNoList
            }
        })
    }
    textChange(e){
        this.setState({
            model:{
                approved:this.state.model.approved,
                text:e.target.value,
                visible:this.state.model.visible,
                title:this.state.model.title,
                id:this.state.model.id,
                loanNotingImageStorageNoList:this.state.model.loanNotingImageStorageNoList,
                mortageImageStorageNoList:this.state.model.mortageImageStorageNoList
            }
        })
    }

    page_up(page,pageSize){
        window.scrollTo(0,0);
        this.get_list(page,this.state.filter);
    }
    show_import(){
        this.setState({
            upload:{
                show:!this.state.upload.show
            }
        });
    }
    get_upload_companyId(id){
        this.setState({
            upload:{
                companyId:id
            }
        })
    }
    render (){
        const { selectedRowKeys } = this.state;
        let pagination = {
            total : this.state.total,
            current : this.state.current,
            pageSize : this.state.pageSize+1,
            onChange : this.page_up.bind(this)
        }
        const rowSelection = {
            selectedRowKeys,
            onChange: (selectedRowKeys, selectedRows) => {
                console.log(selectedRowKeys,selectedRows);
                this.setState({ selectedRowKeys , selectedRows });
            },
            getCheckboxProps: record => ({
                disabled: record.key === '总计',
                name: record.key
            }),
        };
        const table_props = {
            scroll:{x: 1800},
            rowSelection:rowSelection,
            columns:this.columns ,
            dataSource:this.state.data,
            pagination : pagination,
            loading:this.state.loading,
        }
        const footer = [
            <Button key="back" onClick={this.handleCancel.bind(this)}>取消</Button>,
            <Button key="submit" type="primary" loading={this.state.loading_model} onClick={this.handleOk.bind(this)}>确认</Button>
        ]
        const model_props = {
            visible : this.state.model.visible,
            confirmLoading:false,
            title : this.state.model.title,
            onOk : this.handleOk.bind(this),
            onCancel : this.handleCancel.bind(this),
            loanNotingImageStorageNoList:this.state.model.loanNotingImageStorageNoList,
            mortageImageStorageNoList:this.state.model.mortageImageStorageNoList,
            footer : footer
        }

        let upload_items = [];
        for(let c in this.state.companys){
            upload_items.push(
                <div key={c} className="uploadButton" onClick={()=>{this.get_upload_companyId(this.state.companys[c].val)}}><Icon type="folder-add" />&emsp;{this.state.companys[c].name}</div>
            )
        }
        return(
            <div className="Component-body">
                <Filter data-get={this.get_filter.bind(this)} data-source={this.filter} companys={this.state.companys} />
                {
                    //<Row className="content">
                    //<Col span={18}>
                    //    <Button type="primary" onClick={(e)=>(this.batch_operation(true))}>批量通过</Button>&emsp;
                    //    <Button type="primary" onClick={(e)=>(this.batch_operation(false))}>批量驳回</Button>
                    //</Col>
                    //</Row>
                }
                <Row style={{padding:"20px"}}>
                <Row style={{background:"#fff"}}>
                    <Row className="content">
                    <Table {...table_props} bordered />
                </Row>
                </Row>
                </Row>
                
                <Modal {...model_props}>
                    {
                        <Input placeholder="请输入审批意见" value={this.state.model.text} onChange={this.textChange.bind(this)} />
                    }
                </Modal>
            </div>
        )
    }
}

export default ComponentRoute(check_hs);
