import React, { Component } from 'react';
import { Table , Row , Button , Icon , Select } from 'antd';
// import moment from 'moment'

import { axios_fdd } from '../../../ajax/request';
import { fdd_get_list } from '../../../ajax/api';
import { page } from '../../../ajax/config';
import { format_table_data } from '../../../ajax/tool';
import ComponentRoute from '../../../templates/ComponentRoute';

const Option = Select.Option

class check_hs extends Component{
    constructor(props) {
        super(props);
        this.state = {
            selectedRowKeys: [],
            selectedRows: [],
            loading: false,
            total:1,
            current:1,
            pageSize:page.size,
            data:[],
            model:{
                visible:false,
                loading:false,
                title:'确认通过？',
                text:'',
                approved:true,
                id:0,
                loanNotingImageStorageNoList:true,
                mortageImageStorageNoList:true
            },
            companys:[],
            status:0
        };
    }
    componentWillMount(){
        let statusMap = {
            "20":"初审中",
            "21":"复审中",
            "30":"待付款",
            "31":"付款中",
            "40":"付款完成",
            "60":"已结清",
            "61":"已驳回",
            "62":"付款失败",
            "0":"草稿"
        }
        this.columns = [
            {
                title: '序号',
                width: 50,
                dataIndex: 'key',
            },
            {
                title: '订单编号',
                width:300,
                dataIndex: 'orderNo',
            },
            {
                title: '订单时间',
                width:160,
                dataIndex: 'createTime',
            },
            {
                title: '借款方',
                width:150,
                dataIndex:"borrowerName"
            },
            {
                title: '借款金额（元）',
                dataIndex: 'amount',
                render:(e)=>{
                    return e?e/100:""
                }
            },
            {
                title: '借款期限（月）',
                dataIndex: 'period',
            },
            {
                title: '长安保单号',
                width:250,
                dataIndex: 'insuranceNo',
            },
            {
                title: '借款合同强制公证',
                width:140,
                render:(data) => {
                    return data.loanNotingImageStorageNoList&&data.loanNotingImageStorageNoList.length>0?"已上传":"未上传";
                }
            },
            {
                title: '抵押合同强制公证',
                width:140,
                render:(data) => {
                    return data.mortageNotingImageStorageNoList&&data.mortageNotingImageStorageNoList.length>0?"已上传":"未上传";
                }
            },
            {
                title: '不动产登记证明',
                width:120,
                render:(data) => {
                    return data.realEstateRegistrationImageStorageNoList&&data.realEstateRegistrationImageStorageNoList.length>0?"已上传":"未上传";
                }
            },
            {
                title: '订单状态',
                render:(data) => {
                    return statusMap[data.status];
                }
            },
            {
                title: '操作',
                width:100,
                fixed: 'right',

                render: (data) => {
                    if(data.key==='总计'){
                        return '';
                    }
                    return (
                        <span>
                            <Button size="small" onClick={()=>(this.detail(data.orderNo))}>查看</Button>
                        </span>
                    )}
            }
        ];
        this.filter = {
            time:{
                name:"订单时间",
                type:"range_date",
                feild_s:"startTime",
                feild_e:"endTime",
                placeHolder:['开始日期',"结束日期"]
            },
            orderNo :{
                name:"订单编号",
                type:"text",
                placeHolder:"请输入订单编号"
            },
            borrowerName :{
                name:"借款方",
                type:"text",
                placeHolder:"请输入借款方"
            },
            insuranceNo :{
                name:"长安保单号",
                type:"text",
                placeHolder:"请输入长安保单号"
            }
        }

    }
    componentDidMount(){
        this.get_select();
        this.get_list();
    }
    get_list(status="-1",page_no,filter=[]){
        this.setState({
            loading:true,
            selectedRowKeys:[]
        });
        var filterStr="";
        if(filter.length>0){
            for(var i in filter){
                filterStr+="&"+filter[i].key+"="+filter[i].value;
            }
        }else{
            filterStr="";
        }

        axios_fdd.get(fdd_get_list+"?"+(status==="-1"?"&":"status="+this.state.status+"&")+"page="+(page_no===undefined?1:page_no)+"&size="+page.size+filterStr).then((data)=>{
            // let list = this.extract_data(data);
            // console.log(data)
            var datas=data.result.data;
            let list = datas.list;
            let list_temp = [];
            for(let l in list){
                if(status==="-1"&&list[l].status===0){
                    continue;
                }
                list_temp.push(list[l]);
            }
            this.setState({
                data:format_table_data(list_temp),
                total:datas.total,
                current:datas.start,
                loading:false
            })
        });

    }
    get_select(){
        let select_data = JSON.parse(localStorage.getItem("select"));
        this.setState({
            companys:select_data.companys_require
        })
    }
    get_filter(data){
        this.get_list(1,data);
        this.setState({
            filter:data
        });
    }
    detail(orderNo){
        window.open('/jk/list/fdd/detail?orderNo='+orderNo);
    }
    page_up(page,pageSize){
        window.scrollTo(0,0);
        this.get_list(page,this.state.filter);
    }
    handleChanges(value) {
        this.setState({
           status:value
        });
        ////this.get_list(`${value}`);
        //console.log(`selected ${value}`);
    }
    search() {
        this.get_list(this.state.status);
    }

    render (){
        let pagination = {
            total : this.state.total,
            current : this.state.current,
            pageSize : this.state.pageSize+1,
            onChange : this.page_up.bind(this)
        }
        const table_props = {
            scroll:{x: 1800},
            columns:this.columns ,
            dataSource:this.state.data,
            pagination : pagination,
            loading:this.state.loading,
        }

        let upload_items = [];
        for(let c in this.state.companys){
            upload_items.push(
                <div key={c} className="uploadButton" onClick={()=>{this.get_upload_companyId(this.state.companys[c].val)}}><Icon type="folder-add" />&emsp;{this.state.companys[c].name}</div>
            )
        }
        return(
            <div className="Component-body">
                <Row className="content"><br />
                    <Select defaultValue="-1" style={{ width: 120 }} onChange={this.handleChanges.bind(this)}>
                        <Option value="-1">全部</Option>
                        <Option value="20">初审</Option>
                        <Option value="21">复审</Option>
                        <Option value="30">待付款</Option>
                        <Option value="31">付款中</Option>
                        <Option value="62">付款失败</Option>
                        <Option value="40">付款完成</Option>
                        <Option value="60">已结清</Option>
                        <Option value="0">草稿</Option>
                    </Select>&emsp;
                    <Button type="primary" size="small" onClick={this.search.bind(this)}>查询</Button>
                </Row>
                
                <Row className="table-content">
                    <Table {...table_props} bordered />
                </Row>
            </div>
        )
    }
}

export default ComponentRoute(check_hs);
